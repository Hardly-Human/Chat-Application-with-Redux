{"version":3,"sources":["static-data.js","reducers/user.js","reducers/contact.js","actions/constants/action-types.js","reducers/index.js","reducers/activeUserId.js","reducers/messages.js","reducers/typing.js","store/index.js","containers/User/user.js","actions/index.js","components/sidebar/sidebar.js","components/empty/Empty.js","components/header/header.js","components/chats/chats.js","containers/messageInput/messageInput.js","components/chatWindow/ChatWindow.js","components/main/main.js","containers/app/App.js","reportWebVitals.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","userReducer","state","contactsReducer","SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","combineReducers","activeUserId","action","type","payload","message","userId","allUserMsgs","keys","pop","typing","store","createStore","reducers","User","className","onClick","dispatch","id","bind","src","alt","Sidebar","map","contact","Empty","first_name","split","Header","Chat","Chats","props","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","this","ref","Component","MessageInput","value","getState","onSubmit","e","preventDefault","onChange","setTypingValue","target","placeholder","ChatWindow","activeUser","activeMsgs","values","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","console","log","ReactDOM","StrictMode","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.f9686543.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}\n","import { generateUser } from \"../static-data\";\r\n\r\nconst userReducer = (state = generateUser(), action) => {\r\n\treturn state;\r\n};\r\n\r\nexport default userReducer;\r\n","import { contacts } from \"../static-data\";\r\n\r\nconst contactsReducer = (state = contacts, action) => {\r\n\treturn state;\r\n};\r\n\r\nexport default contactsReducer;\r\n","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport userReducer from \"./user\";\r\nimport contactsReducer from \"./contact\";\r\nimport activeUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\n\r\nexport default combineReducers({\r\n\tuser: userReducer,\r\n\tcontacts: contactsReducer,\r\n\tactiveUserId,\r\n\tmessages,\r\n\ttyping,\r\n});\r\n","import { SET_ACTIVE_USER_ID } from \"../actions/constants/action-types\";\r\n\r\nexport default function activeUserId(state = null, action) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_ACTIVE_USER_ID:\r\n\t\t\treturn action.payload;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import _ from \"lodash\";\r\n\r\nimport { getMessages } from \"../static-data\";\r\nimport { SEND_MESSAGE } from \"../actions/constants/action-types\";\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n\tswitch (action.type) {\r\n\t\tcase SEND_MESSAGE:\r\n\t\t\tconst { message, userId } = action.payload;\r\n\t\t\tconst allUserMsgs = state[userId];\r\n\t\t\tconst number = +_.keys(allUserMsgs).pop() + 1;\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[userId]: {\r\n\t\t\t\t\t...allUserMsgs,\r\n\t\t\t\t\t[number]: {\r\n\t\t\t\t\t\tnumber,\r\n\t\t\t\t\t\ttext: message,\r\n\t\t\t\t\t\tis_user_msg: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import {\r\n\tSEND_MESSAGE,\r\n\tSET_TYPING_VALUE,\r\n} from \"../actions/constants/action-types\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n\tswitch (action.type) {\r\n\t\tcase SEND_MESSAGE:\r\n\t\t\treturn \"\";\r\n\t\tcase SET_TYPING_VALUE:\r\n\t\t\treturn action.payload;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducers from \"../reducers\";\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"./user.css\";\r\n\r\nimport store from \"../../store\";\r\nimport { setActiveUserId } from \"../../actions\";\r\n\r\nconst User = ({ user }) => {\r\n\tconst { name, profile_pic, status } = user;\r\n\r\n\treturn (\r\n\t\t<div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n\t\t\t<img src={profile_pic} alt={name} className=\"User__pic\" />\r\n\t\t\t<div className=\"User__details\">\r\n\t\t\t\t<p className=\"User__details-name\">{name}</p>\r\n\t\t\t\t<p className=\"User__details-status\">{status}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\r\n\tfunction handleUserClick({ user_id }) {\r\n\t\tstore.dispatch(setActiveUserId(user_id));\r\n\t}\r\n};\r\n\r\nexport default User;\r\n","import {\r\n\tSET_ACTIVE_USER_ID,\r\n\tSET_TYPING_VALUE,\r\n\tSEND_MESSAGE,\r\n} from \"./constants/action-types\";\r\n\r\nexport const setActiveUserId = (id) => ({\r\n\ttype: SET_ACTIVE_USER_ID,\r\n\tpayload: id,\r\n});\r\n\r\nexport const setTypingValue = (value) => ({\r\n\ttype: SET_TYPING_VALUE,\r\n\tpayload: value,\r\n});\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n\ttype: SEND_MESSAGE,\r\n\tpayload: {\r\n\t\tmessage,\r\n\t\tuserId,\r\n\t},\r\n});\r\n","import React from \"react\";\r\nimport User from \"../../containers/User/user\";\r\nimport \"./sidebar.css\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n\treturn (\r\n\t\t<aside className=\"Sidebar\">\r\n\t\t\t{contacts.map((contact) => (\r\n\t\t\t\t<User user={contact} key={contact.user_id} />\r\n\t\t\t))}\r\n\t\t</aside>\r\n\t);\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./Empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n\tconst { name, profile_pic, status } = user;\r\n\tconst first_name = name.split(\" \")[0];\r\n\r\n\treturn (\r\n\t\t<div className=\"Empty\">\r\n\t\t\t<h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n\t\t\t<img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n\t\t\t<p className=\"Empty__status\">\r\n\t\t\t\t<b>Status:</b> {status}\r\n\t\t\t</p>\r\n\t\t\t<button className=\"Empty__btn\">Start a conversation</button>\r\n\t\t\t<p className=\"Empty__info\">\r\n\t\t\t\tSearch for someone to start chatting with or go to Contacts to\r\n\t\t\t\tsee who is available\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Empty;\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header({ user }) {\r\n\tconst { name, status } = user;\r\n\treturn (\r\n\t\t<header className=\"Header\">\r\n\t\t\t<h1 className=\"Header__name\">{name}</h1>\r\n\t\t\t<p className=\"Header__status\">{status}</p>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./chats.css\";\r\n\r\nconst Chat = ({ message }) => {\r\n\tconst { text, is_user_msg } = message;\r\n\treturn (\r\n\t\t<span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>\r\n\t\t\t{text}\r\n\t\t</span>\r\n\t);\r\n};\r\n\r\nclass Chats extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.chatsRef = React.createRef();\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.scrollToBottom();\r\n\t}\r\n\tcomponentDidUpdate() {\r\n\t\tthis.scrollToBottom();\r\n\t}\r\n\tscrollToBottom = () => {\r\n\t\tthis.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Chats\" ref={this.chatsRef}>\r\n\t\t\t\t{this.props.messages.map((message) => (\r\n\t\t\t\t\t<Chat message={message} key={message.number} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Chats;\r\n","import React from \"react\";\r\nimport store from \"../../store\";\r\nimport { setTypingValue } from \"../../actions\";\r\nimport \"./messageInput.css\";\r\nimport { sendMessage } from \"../../actions\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n\tconst handleChange = (e) => {\r\n\t\tstore.dispatch(setTypingValue(e.target.value));\r\n\t};\r\n\r\n\tconst state = store.getState();\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst { typing, activeUserId } = state;\r\n\t\tstore.dispatch(sendMessage(typing, activeUserId));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form className=\"Message\" onSubmit={handleSubmit}>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"Message__input\"\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tplaceholder=\"write a message\"\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default MessageInput;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport \"./ChatWindow.css\";\r\nimport store from \"../../store\";\r\nimport Header from \"../header/header\";\r\nimport Chats from \"../chats/chats\";\r\nimport MessageInput from \"../../containers/messageInput/messageInput\";\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n\tconst state = store.getState();\r\n\tconst activeUser = state.contacts[activeUserId];\r\n\tconst activeMsgs = state.messages[activeUserId];\r\n\tconst { typing } = state;\r\n\treturn (\r\n\t\t<div className=\"ChatWindow\">\r\n\t\t\t<Header user={activeUser} />\r\n\t\t\t<Chats messages={_.values(activeMsgs)} />\r\n\t\t\t<MessageInput value={typing} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChatWindow;\r\n","import React from \"react\";\r\nimport \"./main.css\";\r\n\r\nimport Empty from \"../empty/Empty\";\r\nimport ChatWindow from \"../chatWindow/ChatWindow\";\r\n\r\nconst Main = ({ user, activeUserId }) => {\r\n\tconst renderMainContent = () => {\r\n\t\tif (!activeUserId) {\r\n\t\t\treturn <Empty user={user} activeUserId={activeUserId} />;\r\n\t\t} else {\r\n\t\t\treturn <ChatWindow activeUserId={activeUserId} />;\r\n\t\t}\r\n\t};\r\n\r\n\treturn <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport _ from \"lodash\";\n\nimport \"./App.css\";\nimport Sidebar from \"../../components/sidebar/sidebar\";\nimport Main from \"../../components/main/main\";\nimport store from \"../../store\";\n\nconst App = () => {\n\tconst { contacts, user, activeUserId } = store.getState();\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Sidebar contacts={_.values(contacts)} />\n\t\t\t<Main user={user} activeUserId={activeUserId} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\n\nfunction fancyLog() {\n\tconsole.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color: #FFF\");\n\tconsole.log(store.getState());\n}\n\nconst render = () => {\n\tfancyLog();\n\treturn ReactDOM.render(\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>,\n\t\tdocument.getElementById(\"root\")\n\t);\n};\nrender();\nstore.subscribe(render);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}